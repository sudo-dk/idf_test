name: ESP-IDF CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache ESP-IDF
        id: cache-esp-idf
        uses: actions/cache@v3
        with:
          path: ~/esp-idf
          key: esp-idf-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            esp-idf-${{ runner.os }}-

      - name: Install ESP-IDF (if not cached)
        if: steps.cache-esp-idf.outputs.cache-hit != 'true'
        run: |
          sudo apt update
          sudo apt install -y git wget flex bison gperf python3 python3-pip python3-venv \
              ninja-build cmake ccache libffi-dev libssl-dev dfu-util
          git clone --recursive https://github.com/espressif/esp-idf.git ~/esp-idf
          cd ~/esp-idf
          ./install.sh
          echo "source ~/esp-idf/export.sh" >> ~/.bashrc

      - name: Build firmware
        run: |
          source ~/esp-idf/export.sh
           cd $GITHUB_WORKSPACE/blink_led  # Ensure the correct directory
          idf.py set-target esp32c3
          idf.py build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path:         
            blink_led/build/*.bin


  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'release:')
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: firmware
          path: blink_led

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: blink_led/*.bin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
